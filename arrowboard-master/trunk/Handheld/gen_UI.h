//========================================================
// UI defintion
//
// Auto generated by ArrowBoardUIBuilder
// Do not edit
//========================================================
#ifndef UI_DEFINTIONS_H
#define UI_DEFINTIONS_H


//////
// each item in a userinterface has a unique ID
// each UI has a list of pages
// each page has a list of element containers
// element containers show location and size and the ID of the element to show
// elements are a parent class
// children of this element class are:
//	 radioButtonSelectionElement, click to select this specific element out of many 
//	 navigationButtonElement, click to navigate to a new page.
//	 			  I envision that we will have a specific page ID
//	 			  to allow navigating back to the previous page
//	 actionButtonElement, clicks on this will initiate an action and potentially change to a different actionButtonElement 
//	 	(Loren's tilt for example)
//	 slideElement, change the location of the slider to select a value
//
// UIs can share pages with other UIs
// Pages can share elements with other pages
// Elements can share graphics with other elements
//
// if the element has command and data, these will be sent to the driver board
//////

//======================================================================================
// uncompressed structures for use by the application
//=======================================================================================
#define MAX_GRAPHICS_PER_BUTTON 10
#define MAX_NEXT_PAGES 5
#ifndef PACKED
#define PACKED __packed
#endif


typedef unsigned short ID;
typedef enum uiColors
{
	eUI_COLOR_WHITE,
    eUI_COLOR_BLACK,
    eUI_COLOR_RED,
    eUI_COLOR_GREEN,
    eUI_COLOR_BLUE,
    eUI_COLOR_AMBER
}eUI_COLOR_INDEX;

typedef enum actuatorControl
{
	eACTUATOR_UP,
	eACTUATOR_DOWN
}eACTUATOR_CONTROL;

typedef enum elementTypes
{
	eELEMENT_TYPE_RADIO_BUTTON,
	eELEMENT_TYPE_NAVIGATION_BUTTON,
	eELEMENT_TYPE_NAVIGATION_RETURN_BUTTON,
	eELEMENT_TYPE_SLIDER,
	eELEMENT_TYPE_DISPLAYONLY,
	eELEMENT_TYPE_NAVIGATION_TO_MAIN_BUTTON,
}eELEMENT_TYPE;

typedef struct element
{
	eELEMENT_TYPE eType;
	unsigned short nLeft;
	unsigned short nTop;
	unsigned short nWidth;
	unsigned short nHeight;
	TIMERCTL buttonTimer;						// timer to be used by the periodic function
	int (*pPeriodicFunction)(struct element*);	// function called periodically in the background
												// to handle animations or image changes due to status changes or whatever	
	int (*pWhichImageFunction)(struct element*); // function to be called to determine which image to display
	int (*pIsEnabledFunction)(struct element*); // function to be called to determine if this element is enabled
	int (*pButtonImageOffsetFunction)(struct element*); // function to be called to get an offset to button image to use
	int nCurrentImageIndex;						// index of the currently displayed graphic
	int nGraphics;								// number of graphics
	ID graphicIDS[MAX_GRAPHICS_PER_BUTTON];		// list of graphics IDs
}ELEMENT;
typedef struct page
{
	ID	ColorMapID;
	int (*pOnEntry)(struct page*);
	int (*pOnExit)(struct page*);
	int nElements;
	ELEMENT *pElementsList;
}PAGE;

typedef struct ui
{
	ID uiID;
	PAGE* pFirstPage;
	QUEUE activePageQueue;
}UI;


typedef unsigned char COLOR_INDEX;

typedef struct graphic
{
	int nWidth;
	int nHeight;
	int nCompressedBytes;
	unsigned char* pGraphicData;
}GRAPHIC;

typedef struct radioButtonSelectionElement
{
	eELEMENT_TYPE eType;							// type of this element
	unsigned short nLeft;							// left side of graphic on the display (starting X coordinate)
	unsigned short nTop;							// top of graphic on the display (starting Y coordinate)
	unsigned short nWidth;							// width of the graphic
	unsigned short nHeight;							// height of the graphic
	TIMERCTL buttonTimer;							// timer to be used by the periodic function
	int (*pPeriodicFunction)(struct element*);		// function called periodically in the background
													// to handle animations or image changes due to status changes or whatever
	int (*pWhichImageFunction)(struct element*); // function to be called to determine which image to display
	int (*pIsEnabledFunction)(struct element*); // function to be called to determine if this element is enabled
	int (*pButtonImageOffsetFunction)(struct element*); // function to be called to get offset to button image to use
	int nCurrentImageIndex;							// index of the currently displayed graphic
	int nGraphics;									// number of graphics
	ID graphicIDS[MAX_GRAPHICS_PER_BUTTON];			// list of graphics IDs

										
										
	int (*pPushbuttonFunction)(struct element*, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);	// function to call on button push
	unsigned short nType;							// command or config id
	unsigned short nData;							// unspecified data 
	BOOL bSelected;									// whether or not this button is selected
}RADIO_BUTTON_SELECTION_ELEMENT;

typedef struct pushButtonNavigationElement
{
	eELEMENT_TYPE eType;							// type of this element
	unsigned short nLeft;							// left side of graphic on the display (starting X coordinate)
	unsigned short nTop;							// top of graphic on the display (starting Y coordinate)
	unsigned short nWidth;							// width of the graphic
	unsigned short nHeight;							// height of the graphic
	TIMERCTL buttonTimer;							// timer to be used by the periodic function
	int (*pPeriodicFunction)(struct element*);		// function called periodically in the background
													// to handle animations or image changes due to status changes or whatever
	int (*pWhichImageFunction)(struct element*);	// function to be called to determine which image to display
	int (*pIsEnabledFunction)(struct element*);		// function to be called to determine if this element is enabled
	int (*pButtonImageOffsetFunction)(struct element*);		// function to be called to get offset to button image
	int nCurrentImageIndex;							// index of the currently displayed graphic
	int nGraphics;									// number of graphics
	ID graphicIDS[MAX_GRAPHICS_PER_BUTTON];			// list of graphics IDs
	int (*pPushbuttonFunction)(struct element*, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);	// function to call on button push
	int nNextPages;									// number of pages this element could navigate to
	ID nextPageIDS[MAX_NEXT_PAGES];					// list of pages
	
}PUSHBUTTON_NAVIGATION_ELEMENT;

typedef struct pushButtonNavigationReturnElement
{

	eELEMENT_TYPE eType;							// type of this element
	unsigned short nLeft;							// left side of graphic on the display (starting X coordinate)
	unsigned short nTop;							// top of graphic on the display (starting Y coordinate)
	unsigned short nWidth;							// width of the graphic
	unsigned short nHeight;							// height of the graphic
	TIMERCTL buttonTimer;							// timer to be used by the periodic function
	int (*pPeriodicFunction)(struct element*);		// function called periodically in the background
													// to handle animations or image changes due to status changes or whatever
	int (*pWhichImageFunction)(struct element*);	// function to be called to determine which image to display
	int (*pIsEnabledFunction)(struct element*);		// function to be called to determine if this element is enabled
	int (*pButtonImageOffsetFunction)(struct element*);		// function to be called to get offset to button image
	int nCurrentImageIndex;							// index of the currently displayed graphic
	int nGraphics;									// number of graphics
	ID graphicIDS[MAX_GRAPHICS_PER_BUTTON];			// list of graphics IDs

}PUSHBUTTON_NAVIGATION_RETURN_ELEMENT;

typedef struct SliderElement
{
	eELEMENT_TYPE eType;
	unsigned short nLeft;							// left side of graphic on the display (starting X coordinate)
	unsigned short nTop;							// top of graphic on the display (starting Y coordinate)
	unsigned short nWidth;							// width of the graphic
	unsigned short nHeight;							// height of the graphic
	TIMERCTL buttonTimer;							// timer to be used by the periodic function
	int (*pPeriodicFunction)(struct element*);		// function called periodically in the background
													// to handle animations or image changes due to status changes or whatever
	int (*pWhichImageFunction)(struct element*);	// function to be called to determine which image to display
	int (*pIsEnabledFunction)(struct element*);		// function to be called to determine if this element is enabled
	int (*pButtonImageOffsetFunction)(struct element*);		// function to be called to get offset for button image
	int nCurrentImageIndex;							// index of the currently displayed graphic
	int nGraphics;									// number of graphics
	ID graphicIDS[MAX_GRAPHICS_PER_BUTTON];			// list of graphics IDs
	unsigned short nMin;
	unsigned short nMax;
	unsigned short nCurrent;
	ID graphicSlideID;
	ID graphicButtonID;
}SLIDER_ELEMENT;


typedef struct displayOnlyElement
{
	eELEMENT_TYPE eType;							// type of this element
	unsigned short nLeft;							// left side of graphic on the display (starting X coordinate)
	unsigned short nTop;							// top of graphic on the display (starting Y coordinate)
	unsigned short nWidth;							// width of the graphic
	unsigned short nHeight;							// height of the graphic
	TIMERCTL buttonTimer;							// timer to be used by the periodic function
	int (*pPeriodicFunction)(struct element*);		// function called periodically in the background
													// to handle animations or image changes due to status changes or whatever	
	int (*pWhichImageFunction)(struct element*);	// function to be called to determine which image to display
	int (*pIsEnabledFunction)(struct element*);		// function to be called to determine if this element is enabled
	int (*pButtonIndexOffsetFunction)(struct element*);		// function to be called to get an offset into button images
	int nCurrentImageIndex;							// index of the currently displayed graphic
	int nGraphics;									// number of graphics
	ID graphicIDS[MAX_GRAPHICS_PER_BUTTON];			// list of graphics IDs
	int (*pImageGenerationFunction)(struct element*);// function to call to generate the image
}DISPLAY_ONLY_SELECTION_ELEMENT;


//======================================================================================
// compressed read from structures from SPI flash
//======================================================================================

//unsigned short nIDs;
typedef PACKED struct idMap
{
		unsigned short ID;		// identifier 
		unsigned short nLength;	// length of data referred to
		unsigned long nOffset;		// offset into flash memory to the start of this data
}STORED_IDMAP;

typedef PACKED struct storedUI
{
	unsigned short firstPageID;
	unsigned short patternImagesID;
}STORED_UI;

typedef PACKED struct storedColorMap
{
	unsigned short mapData[256];
}STORED_COLORMAP;

typedef PACKED struct storedPage
{
	unsigned short colorMapID;
	unsigned short onEntryID;
	unsigned short onExitID;
	unsigned short nElements;
	unsigned short elementIDList[];
}STORED_PAGE;

typedef PACKED struct storedElement
{
	unsigned short elementType;
	unsigned short nLeft;
	unsigned short nTop;
	unsigned short nWidth;
	unsigned short nHeight;
	unsigned short periodicFunctionID;
	unsigned short pushButtonFunctionID;
	unsigned short isEnabledFunctionID;
	unsigned short buttonImageOffsetFunctionID;
	unsigned short imageGenerationFunctionID;
	unsigned short whichImageFunctionID;
	unsigned short nType;
	unsigned short nData;
	unsigned short nGraphics;
	unsigned short graphicIDList[MAX_GRAPHICS_PER_BUTTON];
	unsigned short nNextPages;
	unsigned short nextPagesIDList[MAX_NEXT_PAGES];

}STORED_ELEMENT;

typedef PACKED struct storedGraphics
{
	unsigned short nWidth;
	unsigned short nHeight;
	unsigned short  nCompressedBytes;
	unsigned char compressedData[];
}STORED_GRAPHICS;

typedef PACKED struct storedPatternImages
{
	unsigned short blankImagesCount;
	unsigned short blankImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short fourCornerImagesCount;
	unsigned short fourCornerImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short doubleArrowImagesCount;
	unsigned short doubleArrowImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short barImagesCount;
	unsigned short barImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short rightArrowImagesCount;
	unsigned short rightArrowImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short leftArrowImagesCount;
	unsigned short leftArrowImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short rightStemArrowImagesCount;
	unsigned short rightStemArrowImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short leftStemArrowImagesCount;
	unsigned short leftStemArrowImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short rightWalkingArrowImagesCount;
	unsigned short rightWalkingArrowImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short leftWalkingArrowImagesCount;
	unsigned short leftWalkingArrowImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short rightChevronImagesCount;
	unsigned short rightChevronImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short leftChevronImagesCount;
	unsigned short leftChevronImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short doubleDiamondImagesCount;
	unsigned short doubleDiamondImagesIDs[MAX_GRAPHICS_PER_BUTTON];
	unsigned short wigWagImagesCount;
	unsigned short wigWagImagesIDs[MAX_GRAPHICS_PER_BUTTON];
}STORED_PATTERN_IMAGES;


//=====================================================
// Function prototypes
// structure manipulation
//====================================================
//===========================================
// Function prototypes
//===========================================
typedef int (funcOnEntryExit(PAGE* pPage));
typedef int (funcPeriodic(ELEMENT* pElement));
typedef int (funcPushbutton(ELEMENT* pElement,  unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected));
typedef int (funcWhichImagebutton(ELEMENT* pElement));
typedef int (funcIsEnabledbutton(ELEMENT* pElement));
typedef int (funcButtonImageOffsetbutton(ELEMENT* pElement));
typedef int (funcImageGeneration(ELEMENT* pElement));
funcOnEntryExit *onEntryExitIDToFunction(int nID);
funcPeriodic *periodicIDToFunction(int nID);
funcPushbutton *pushbuttonIDToFunction(int nID);
funcWhichImagebutton *whichImageIDToFunction(int nID);
funcIsEnabledbutton *isEnabledIDToFunction(int nID);
funcIsEnabledbutton *buttonImageOffsetIDToFunction(int nID);
funcImageGeneration *imageGenerationIDToFunction(int nID);
int OnEntryTiltStatus(struct page* thePage);
int OnExitTiltStop(struct page* thePage);
int OnExitCalibrateTiltCancel(struct page* thePage);
int OnExitMaintMode(struct page* thePage);
int OnExitStatusAlarm(struct page* thePage);
int DisplayCurrentPattern(struct element* theElement);
int CheckStatus(struct element* theElement);
int CheckConnected(struct element* theElement);
int MoveActuatorUp(struct element* theElement);
int MoveActuatorDown(struct element* theElement);
int Tilt90Animation(struct element* theElement);
int Tilt180Animation(struct element* theElement);
int MoveActuatorRight(struct element* theElement);
int MoveActuatorLeft(struct element* theElement);
int CheckConnectedAndTilt(struct element* theElement);
int CloneGettingData(struct element* theElement);
int CalibrateTiltUp(struct element* theElement);
int CalibrateTiltDown(struct element* theElement);
int CheckPaired(struct element* theElement);
int CheckBatteryVoltage(struct element* theElement);
int MoveActuatorNeutral(struct element* theElement);
int CheckLineCurrentOnesDigit(struct element* theElement);
int CheckLineCurrentTenthsDigit(struct element* theElement);
int CheckSystemCurrentOnesDigit(struct element* theElement);
int CheckSystemCurrentTenthsDigit(struct element* theElement);
int CheckLineCurrentTensDigit(struct element* theElement);
int CheckSystemCurrentTensDigit(struct element* theElement);
int CheckStatusArrowBoardType(struct element* theElement);
int CheckStatusStyleType(struct element* theElement);
int CheckStatusElectricActuatorType(struct element* theElement);
int CheckSystemVoltageTensDigit(struct element* theElement);
int CheckSystemVoltageOnesDigit(struct element* theElement);
int CheckSystemVoltageTenthsDigit(struct element* theElement);
int CheckStatusVoltageScreen(struct element* theElement);
int CheckImageAlarmState(struct element* theElement);
int CheckImageVoltageState(struct element* theElement);
int CheckImageSystemState(struct element* theElement);
int CheckImageAlarmLevelConnLowBatt(struct element* theElement);
int CheckImageAlarmLevelLowVoltage(struct element* theElement);
int CheckImageAlarmLevelLampsDisabled(struct element* theElement);
int CheckImageAlarmLevelTempHigh(struct element* theElement);
int CheckStatusConfigScreen(struct element* theElement);
int CheckEnabledConnect(struct element* theElement);
int checkImageDriverVersion1(struct element* theElement);
int checkImageDriverVersion2(struct element* theElement);
int checkImageDriverVersion3(struct element* theElement);
int checkImageDriverVersion4(struct element* theElement);
int checkImageDriverVersion5(struct element* theElement);
int checkRssiDigit1(struct element* theElement);
int checkRssiDigit2(struct element* theElement);
int SendDisplayCommand(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int SendActuatorCommand(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int SendWirelessConfig(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int PopPageFirst(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int AlarmUpDownButtonPress(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int WhichPatternSelectPage(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int WhichTiltPageSelect(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int Actuator90UpPress(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int Actuator90DownPress(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int Actuator90StopPress(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int Actuator180RightPress(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int Actuator180LeftPress(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int Actuator180StopPress(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int SetNightDay(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int SetArrowBoardBright(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int SetArrowBoardDim(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int SetArrowBoardAutoBrightness(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoTouchScreenCalibrate(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoReset(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoCalibrateTiltUp(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoCalibrateTiltDown(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSelectEnglishUI(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSelectSpanishUI(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoAllLightsOn(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoAllLightsOff(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoClonePush(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoClonePull(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSetActuatorButtonAutoMode(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSetActuatorButtonManualMode(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoTogglePatternSelectAllow(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int CalTransActuatorUp(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int CalTransActuatorDown(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSetControllerDefaults(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSetTiltFrame90(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSetTiltFrame180(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSetTiltFrameNone(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoCancelCalibrateTilt(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSelectCustomUI(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoErroredLightsOff(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int Actuator180NeutralPress(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSelectStandardScreen(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int DoSelectSingleScreen(struct element* theElement, unsigned char bTouchInProgress, unsigned char bThisButtonIsSelected);
int IsSelectedPatternButton(struct element* theElement);
int WhichImageAggregateAlarm(struct element* theElement);
int WhichImageAlarmLevelBattRevDispError(struct element* theElement);
int WhichImageAlarmLevelConnLowBatt(struct element* theElement);
int WhichImageAlarmLevelControlTempAuxError(struct element* theElement);
int WhichImageAlarmLevel(struct element* theElement);
int WhichImageAlarmLevelLVDLowVolt(struct element* theElement);
int WhichImageAlarmLevelLineRevIndError(struct element* theElement);
int WhichImageAlarmState(struct element* theElement);
int WhichImageAlarmUpDownButton(struct element* theElement);
int WhichImageBatteryVoltage(struct element* theElement);
int WhichImageSystemState(struct element* theElement);
int WhichImageVoltageState(struct element* theElement);
int WhichImageNightDay(struct element* theElement);
int WhichImageIsBrightSelected(struct element* theElement);
int WhichImageIsDimSelected(struct element* theElement);
int WhichImageIsAutoBrightSelected(struct element* theElement);
int WhichImageIsCalibrateTiltUpInProgress(struct element* theElement);
int WhichImageIsCalibrateTiltDownInProgress(struct element* theElement);
int WhichImageSetActuatorButtonModeAuto(struct element* theElement);
int WhichImageSetActuatorButtonModeManual(struct element* theElement);
int WhichImagePatternSelectAllow(struct element* theElement);
int IsSelectedEnglish(struct element* theElement);
int IsSelectedSpanish(struct element* theElement);
int WhichImageTiltFrame90(struct element* theElement);
int WhichImageTiltFrame180(struct element* theElement);
int WhichImageTiltFrameNone(struct element* theElement);
int WhichImageCloneGettingData(struct element* theElement);
int IsSelectedCustom(struct element* theElement);
int WhichImageMaintModeAllLightsOn(struct element* theElement);
int WhichImageMaintModeAllLightsOff(struct element* theElement);
int WhichTiltButtonImage(struct element* theElement);
int WhichImageStatusControllerSoftwareButton(struct element* theElement);
int WhichImageStatusDriverSoftwareButton(struct element* theElement);
int WhichImageMaintModeErroredLightsOff(struct element* theElement);
int WhichImagePaired(struct element* theElement);
int WhichImageLineCurrentOnesDigit(struct element* theElement);
int WhichImageLineCurrentTenthsDigit(struct element* theElement);
int WhichImageSystemCurrentOnesDigit(struct element* theElement);
int WhichImageSystemCurrentTenthsDigit(struct element* theElement);
int WhichImageActuatorUp(struct element* theElement);
int WhichImageActuatorDown(struct element* theElement);
int WhichImageActuatorLeft(struct element* theElement);
int WhichImageActuatorRight(struct element* theElement);
int WhichImageActuatorNeutral(struct element* theElement);
int WhichImageLineCurrentTensDigit(struct element* theElement);
int WhichImageSystemCurrentTensDigit(struct element* theElement);
int WhichImageControllerVersionDigit1(struct element* theElement);
int WhichImageControllerVersionDigit2(struct element* theElement);
int WhichImageControllerVersionDigit3(struct element* theElement);
int WhichImageControllerVersionDigit4(struct element* theElement);
int WhichImageControllerVersionDigit5(struct element* theElement);
int WhichImageDriverVersionDigit1(struct element* theElement);
int WhichImageDriverVersionDigit2(struct element* theElement);
int WhichImageDriverVersionDigit3(struct element* theElement);
int WhichImageDriverVersionDigit4(struct element* theElement);
int WhichImageDriverVersionDigit5(struct element* theElement);
int WhichImageSelectedStandardMain(struct element* theElement);
int WhichImageSelectedSingleMain(struct element* theElement);
int WhichImageStatusElectricActuatorButton(struct element* theElement);
int WhichSystemVoltageTensDigit(struct element* theElement);
int WhichSystemVoltageOnesDigit(struct element* theElement);
int WhichSystemVoltageTenthsDigit(struct element* theElement);
int WhichImageRssiDigit1(struct element* theElement);
int WhichImageRssiDigit2(struct element* theElement);
int IsEnabledConnect(struct element* theElement);
int IsEnabledModel(struct element* theElement);
int IsEnabledWiredConnection(struct element* theElement);
int IsEnabledActuator(struct element* theElement);
int IsEnabledSpanishUI(struct element* theElement);
int IsEnabledPatternAllowed(struct element* theElement);
int IsEnabledCustomUI(struct element* theElement);
int ButtonImageOffsetWigWag(struct element* theElement);
int ShowVersionText(struct element* theElement);
//===========================================
// Function ID numbers
//===========================================

#define NULL_FUNCTION_ID	0
/////
// On Entry/On Exit
/////
#define EXIT_ENTRY_FUNCTION_ID_OnEntryTiltStatus	1
#define EXIT_ENTRY_FUNCTION_ID_OnExitTiltStop	2
#define EXIT_ENTRY_FUNCTION_ID_OnExitCalibrateTiltCancel	3
#define EXIT_ENTRY_FUNCTION_ID_OnExitMaintMode	4
#define EXIT_ENTRY_FUNCTION_ID_OnExitStatusAlarm	5
/////
// Periodic functions
/////
#define PERIODIC_FUNCTION_ID_DisplayCurrentPattern	1
#define PERIODIC_FUNCTION_ID_CheckStatus	2
#define PERIODIC_FUNCTION_ID_CheckConnected	3
#define PERIODIC_FUNCTION_ID_MoveActuatorUp	4
#define PERIODIC_FUNCTION_ID_MoveActuatorDown	5
#define PERIODIC_FUNCTION_ID_Tilt90Animation	6
#define PERIODIC_FUNCTION_ID_Tilt180Animation	7
#define PERIODIC_FUNCTION_ID_MoveActuatorRight	8
#define PERIODIC_FUNCTION_ID_MoveActuatorLeft	9
#define PERIODIC_FUNCTION_ID_CheckConnectedAndTilt	10
#define PERIODIC_FUNCTION_ID_CloneGettingData	11
#define PERIODIC_FUNCTION_ID_CalibrateTiltUp	12
#define PERIODIC_FUNCTION_ID_CalibrateTiltDown	13
#define PERIODIC_FUNCTION_ID_CheckPaired	14
#define PERIODIC_FUNCTION_ID_CheckBatteryVoltage	15
#define PERIODIC_FUNCTION_ID_MoveActuatorNeutral	16
#define PERIODIC_FUNCTION_ID_CheckLineCurrentOnesDigit	17
#define PERIODIC_FUNCTION_ID_CheckLineCurrentTenthsDigit	18
#define PERIODIC_FUNCTION_ID_CheckSystemCurrentOnesDigit	19
#define PERIODIC_FUNCTION_ID_CheckSystemCurrentTenthsDigit	20
#define PERIODIC_FUNCTION_ID_CheckLineCurrentTensDigit	21
#define PERIODIC_FUNCTION_ID_CheckSystemCurrentTensDigit	22
#define PERIODIC_FUNCTION_ID_CheckStatusArrowBoardType	23
#define PERIODIC_FUNCTION_ID_CheckStatusStyleType	24
#define PERIODIC_FUNCTION_ID_CheckStatusElectricActuatorType	25
#define PERIODIC_FUNCTION_ID_CheckSystemVoltageTensDigit	26
#define PERIODIC_FUNCTION_ID_CheckSystemVoltageOnesDigit	27
#define PERIODIC_FUNCTION_ID_CheckSystemVoltageTenthsDigit	28
#define PERIODIC_FUNCTION_ID_CheckStatusVoltageScreen	29
#define PERIODIC_FUNCTION_ID_CheckImageAlarmState	30
#define PERIODIC_FUNCTION_ID_CheckImageVoltageState	31
#define PERIODIC_FUNCTION_ID_CheckImageSystemState	32
#define PERIODIC_FUNCTION_ID_CheckImageAlarmLevelConnLowBatt	33
#define PERIODIC_FUNCTION_ID_CheckImageAlarmLevelLowVoltage	34
#define PERIODIC_FUNCTION_ID_CheckImageAlarmLevelLampsDisabled	35
#define PERIODIC_FUNCTION_ID_CheckImageAlarmLevelTempHigh	36
#define PERIODIC_FUNCTION_ID_CheckStatusConfigScreen	37
#define PERIODIC_FUNCTION_ID_CheckEnabledConnect	38
#define PERIODIC_FUNCTION_ID_checkImageDriverVersion1	39
#define PERIODIC_FUNCTION_ID_checkImageDriverVersion2	40
#define PERIODIC_FUNCTION_ID_checkImageDriverVersion3	41
#define PERIODIC_FUNCTION_ID_checkImageDriverVersion4	42
#define PERIODIC_FUNCTION_ID_checkImageDriverVersion5	43
#define PERIODIC_FUNCTION_ID_checkRssiDigit1	44
#define PERIODIC_FUNCTION_ID_checkRssiDigit2	45
/////
// Pushbutton functions
/////
#define PUSHBUTTON_FUNCTION_ID_SendDisplayCommand	1
#define PUSHBUTTON_FUNCTION_ID_SendActuatorCommand	2
#define PUSHBUTTON_FUNCTION_ID_SendWirelessConfig	3
#define PUSHBUTTON_FUNCTION_ID_PopPageFirst	4
#define PUSHBUTTON_FUNCTION_ID_AlarmUpDownButtonPress	5
#define PUSHBUTTON_FUNCTION_ID_WhichPatternSelectPage	6
#define PUSHBUTTON_FUNCTION_ID_WhichTiltPageSelect	7
#define PUSHBUTTON_FUNCTION_ID_Actuator90UpPress	8
#define PUSHBUTTON_FUNCTION_ID_Actuator90DownPress	9
#define PUSHBUTTON_FUNCTION_ID_Actuator90StopPress	10
#define PUSHBUTTON_FUNCTION_ID_Actuator180RightPress	11
#define PUSHBUTTON_FUNCTION_ID_Actuator180LeftPress	12
#define PUSHBUTTON_FUNCTION_ID_Actuator180StopPress	13
#define PUSHBUTTON_FUNCTION_ID_SetNightDay	14
#define PUSHBUTTON_FUNCTION_ID_SetArrowBoardBright	15
#define PUSHBUTTON_FUNCTION_ID_SetArrowBoardDim	16
#define PUSHBUTTON_FUNCTION_ID_SetArrowBoardAutoBrightness	17
#define PUSHBUTTON_FUNCTION_ID_DoTouchScreenCalibrate	18
#define PUSHBUTTON_FUNCTION_ID_DoReset	19
#define PUSHBUTTON_FUNCTION_ID_DoCalibrateTiltUp	20
#define PUSHBUTTON_FUNCTION_ID_DoCalibrateTiltDown	21
#define PUSHBUTTON_FUNCTION_ID_DoSelectEnglishUI	22
#define PUSHBUTTON_FUNCTION_ID_DoSelectSpanishUI	23
#define PUSHBUTTON_FUNCTION_ID_DoAllLightsOn	24
#define PUSHBUTTON_FUNCTION_ID_DoAllLightsOff	25
#define PUSHBUTTON_FUNCTION_ID_DoClonePush	26
#define PUSHBUTTON_FUNCTION_ID_DoClonePull	27
#define PUSHBUTTON_FUNCTION_ID_DoSetActuatorButtonAutoMode	28
#define PUSHBUTTON_FUNCTION_ID_DoSetActuatorButtonManualMode	29
#define PUSHBUTTON_FUNCTION_ID_DoTogglePatternSelectAllow	30
#define PUSHBUTTON_FUNCTION_ID_CalTransActuatorUp	31
#define PUSHBUTTON_FUNCTION_ID_CalTransActuatorDown	32
#define PUSHBUTTON_FUNCTION_ID_DoSetControllerDefaults	33
#define PUSHBUTTON_FUNCTION_ID_DoSetTiltFrame90	34
#define PUSHBUTTON_FUNCTION_ID_DoSetTiltFrame180	35
#define PUSHBUTTON_FUNCTION_ID_DoSetTiltFrameNone	36
#define PUSHBUTTON_FUNCTION_ID_DoCancelCalibrateTilt	37
#define PUSHBUTTON_FUNCTION_ID_DoSelectCustomUI	38
#define PUSHBUTTON_FUNCTION_ID_DoErroredLightsOff	39
#define PUSHBUTTON_FUNCTION_ID_Actuator180NeutralPress	40
#define PUSHBUTTON_FUNCTION_ID_DoSelectStandardScreen	41
#define PUSHBUTTON_FUNCTION_ID_DoSelectSingleScreen	42
/////
// isEnabled functions
/////
#define ISENABLED_FUNCTION_ID_IsEnabledConnect	1
#define ISENABLED_FUNCTION_ID_IsEnabledModel	2
#define ISENABLED_FUNCTION_ID_IsEnabledWiredConnection	3
#define ISENABLED_FUNCTION_ID_IsEnabledActuator	4
#define ISENABLED_FUNCTION_ID_IsEnabledSpanishUI	5
#define ISENABLED_FUNCTION_ID_IsEnabledPatternAllowed	6
#define ISENABLED_FUNCTION_ID_IsEnabledCustomUI	7
/////
// buttonImageOffset functions
/////
#define BUTTONIMAGEOFFSET_FUNCTION_ID_ButtonImageOffsetWigWag	1
/////
// imageGeneration functions
/////
#define IMAGEGENERATION_FUNCTION_ID_ShowVersionText	1
/////
// which image functions
/////
#define WHICHIMAGE_FUNCTION_ID_IsSelectedPatternButton	1
#define WHICHIMAGE_FUNCTION_ID_WhichImageAggregateAlarm	2
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevelBattRevDispError	3
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevelConnLowBatt	4
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevelControlTempAuxError	5
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevel	6
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevelLVDLowVolt	7
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevelLineRevIndError	8
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmState	9
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmUpDownButton	10
#define WHICHIMAGE_FUNCTION_ID_WhichImageBatteryVoltage	11
#define WHICHIMAGE_FUNCTION_ID_WhichImageSystemState	12
#define WHICHIMAGE_FUNCTION_ID_WhichImageVoltageState	13
#define WHICHIMAGE_FUNCTION_ID_WhichImageNightDay	14
#define WHICHIMAGE_FUNCTION_ID_WhichImageIsBrightSelected	15
#define WHICHIMAGE_FUNCTION_ID_WhichImageIsDimSelected	16
#define WHICHIMAGE_FUNCTION_ID_WhichImageIsAutoBrightSelected	17
#define WHICHIMAGE_FUNCTION_ID_WhichImageIsCalibrateTiltUpInProgress	18
#define WHICHIMAGE_FUNCTION_ID_WhichImageIsCalibrateTiltDownInProgress	19
#define WHICHIMAGE_FUNCTION_ID_WhichImageSetActuatorButtonModeAuto	20
#define WHICHIMAGE_FUNCTION_ID_WhichImageSetActuatorButtonModeManual	21
#define WHICHIMAGE_FUNCTION_ID_WhichImagePatternSelectAllow	22
#define WHICHIMAGE_FUNCTION_ID_IsSelectedEnglish	23
#define WHICHIMAGE_FUNCTION_ID_IsSelectedSpanish	24
#define WHICHIMAGE_FUNCTION_ID_WhichImageTiltFrame90	25
#define WHICHIMAGE_FUNCTION_ID_WhichImageTiltFrame180	26
#define WHICHIMAGE_FUNCTION_ID_WhichImageTiltFrameNone	27
#define WHICHIMAGE_FUNCTION_ID_WhichImageCloneGettingData	28
#define WHICHIMAGE_FUNCTION_ID_IsSelectedCustom	29
#define WHICHIMAGE_FUNCTION_ID_WhichImageMaintModeAllLightsOn	30
#define WHICHIMAGE_FUNCTION_ID_WhichImageMaintModeAllLightsOff	31
#define WHICHIMAGE_FUNCTION_ID_WhichTiltButtonImage	32
#define WHICHIMAGE_FUNCTION_ID_WhichImageStatusControllerSoftwareButton	33
#define WHICHIMAGE_FUNCTION_ID_WhichImageStatusDriverSoftwareButton	34
#define WHICHIMAGE_FUNCTION_ID_WhichImageMaintModeErroredLightsOff	35
#define WHICHIMAGE_FUNCTION_ID_WhichImagePaired	36
#define WHICHIMAGE_FUNCTION_ID_WhichImageLineCurrentOnesDigit	37
#define WHICHIMAGE_FUNCTION_ID_WhichImageLineCurrentTenthsDigit	38
#define WHICHIMAGE_FUNCTION_ID_WhichImageSystemCurrentOnesDigit	39
#define WHICHIMAGE_FUNCTION_ID_WhichImageSystemCurrentTenthsDigit	40
#define WHICHIMAGE_FUNCTION_ID_WhichImageActuatorUp	41
#define WHICHIMAGE_FUNCTION_ID_WhichImageActuatorDown	42
#define WHICHIMAGE_FUNCTION_ID_WhichImageActuatorLeft	43
#define WHICHIMAGE_FUNCTION_ID_WhichImageActuatorRight	44
#define WHICHIMAGE_FUNCTION_ID_WhichImageActuatorNeutral	45
#define WHICHIMAGE_FUNCTION_ID_WhichImageLineCurrentTensDigit	46
#define WHICHIMAGE_FUNCTION_ID_WhichImageSystemCurrentTensDigit	47
#define WHICHIMAGE_FUNCTION_ID_WhichImageControllerVersionDigit1	48
#define WHICHIMAGE_FUNCTION_ID_WhichImageControllerVersionDigit2	49
#define WHICHIMAGE_FUNCTION_ID_WhichImageControllerVersionDigit3	50
#define WHICHIMAGE_FUNCTION_ID_WhichImageControllerVersionDigit4	51
#define WHICHIMAGE_FUNCTION_ID_WhichImageControllerVersionDigit5	52
#define WHICHIMAGE_FUNCTION_ID_WhichImageDriverVersionDigit1	53
#define WHICHIMAGE_FUNCTION_ID_WhichImageDriverVersionDigit2	54
#define WHICHIMAGE_FUNCTION_ID_WhichImageDriverVersionDigit3	55
#define WHICHIMAGE_FUNCTION_ID_WhichImageDriverVersionDigit4	56
#define WHICHIMAGE_FUNCTION_ID_WhichImageDriverVersionDigit5	57
#define WHICHIMAGE_FUNCTION_ID_WhichImageSelectedStandardMain	58
#define WHICHIMAGE_FUNCTION_ID_WhichImageSelectedSingleMain	59
#define WHICHIMAGE_FUNCTION_ID_WhichImageStatusElectricActuatorButton	60
#define WHICHIMAGE_FUNCTION_ID_WhichSystemVoltageTensDigit	61
#define WHICHIMAGE_FUNCTION_ID_WhichSystemVoltageOnesDigit	62
#define WHICHIMAGE_FUNCTION_ID_WhichSystemVoltageTenthsDigit	63
#define WHICHIMAGE_FUNCTION_ID_WhichImageRssiDigit1	64
#define WHICHIMAGE_FUNCTION_ID_WhichImageRssiDigit2	65

//===========================================
// UI ID numbers
//===========================================
#define UI1_ID           1
#define UI2_ID           2
#define UI3_ID           3
#define UI4_ID           4

#endif		// UI_DEFINITIONS_H
#define WHICHIMAGE_FUNCTION_ID_IsSelectedPatternButton	1
#define WHICHIMAGE_FUNCTION_ID_WhichImageAggregateAlarm	2
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevelBattRevDispError	3
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevelConnLowBatt	4
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevelControlTempAuxError	5
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevel	6
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevelLVDLowVolt	7
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmLevelLineRevIndError	8
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmState	9
#define WHICHIMAGE_FUNCTION_ID_WhichImageAlarmUpDownButton	10
#define WHICHIMAGE_FUNCTION_ID_WhichImageBatteryVoltage	11
#define WHICHIMAGE_FUNCTION_ID_WhichImageSystemState	12
#define WHICHIMAGE_FUNCTION_ID_WhichImageVoltageState	13
#define WHICHIMAGE_FUNCTION_ID_WhichImageNightDay	14
#define WHICHIMAGE_FUNCTION_ID_WhichImageIsBrightSelected	15
#define WHICHIMAGE_FUNCTION_ID_WhichImageIsDimSelected	16
#define WHICHIMAGE_FUNCTION_ID_WhichImageIsAutoBrightSelected	17
#define WHICHIMAGE_FUNCTION_ID_WhichImageIsCalibrateTiltUpInProgress	18
#define WHICHIMAGE_FUNCTION_ID_WhichImageIsCalibrateTiltDownInProgress	19
#define WHICHIMAGE_FUNCTION_ID_WhichImageSetActuatorButtonModeAuto	20
#define WHICHIMAGE_FUNCTION_ID_WhichImageSetActuatorButtonModeManual	21
#define WHICHIMAGE_FUNCTION_ID_WhichImagePatternSelectAllow	22
#define WHICHIMAGE_FUNCTION_ID_IsSelectedEnglish	23
#define WHICHIMAGE_FUNCTION_ID_IsSelectedSpanish	24
#define WHICHIMAGE_FUNCTION_ID_WhichImageTiltFrame90	25
#define WHICHIMAGE_FUNCTION_ID_WhichImageTiltFrame180	26
#define WHICHIMAGE_FUNCTION_ID_WhichImageTiltFrameNone	27
#define WHICHIMAGE_FUNCTION_ID_WhichImageCloneGettingData	28
#define WHICHIMAGE_FUNCTION_ID_IsSelectedCustom	29
#define WHICHIMAGE_FUNCTION_ID_WhichImageMaintModeAllLightsOn	30
#define WHICHIMAGE_FUNCTION_ID_WhichImageMaintModeAllLightsOff	31
#define WHICHIMAGE_FUNCTION_ID_WhichTiltButtonImage	32
#define WHICHIMAGE_FUNCTION_ID_WhichImageStatusControllerSoftwareButton	33
#define WHICHIMAGE_FUNCTION_ID_WhichImageStatusDriverSoftwareButton	34
#define WHICHIMAGE_FUNCTION_ID_WhichImageMaintModeErroredLightsOff	35
#define WHICHIMAGE_FUNCTION_ID_WhichImagePaired	36
#define WHICHIMAGE_FUNCTION_ID_WhichImageLineCurrentOnesDigit	37
#define WHICHIMAGE_FUNCTION_ID_WhichImageLineCurrentTenthsDigit	38
#define WHICHIMAGE_FUNCTION_ID_WhichImageSystemCurrentOnesDigit	39
#define WHICHIMAGE_FUNCTION_ID_WhichImageSystemCurrentTenthsDigit	40
#define WHICHIMAGE_FUNCTION_ID_WhichImageActuatorUp	41
#define WHICHIMAGE_FUNCTION_ID_WhichImageActuatorDown	42
#define WHICHIMAGE_FUNCTION_ID_WhichImageActuatorLeft	43
#define WHICHIMAGE_FUNCTION_ID_WhichImageActuatorRight	44
#define WHICHIMAGE_FUNCTION_ID_WhichImageActuatorNeutral	45
#define WHICHIMAGE_FUNCTION_ID_WhichImageLineCurrentTensDigit	46
#define WHICHIMAGE_FUNCTION_ID_WhichImageSystemCurrentTensDigit	47
#define WHICHIMAGE_FUNCTION_ID_WhichImageControllerVersionDigit1	48
#define WHICHIMAGE_FUNCTION_ID_WhichImageControllerVersionDigit2	49
#define WHICHIMAGE_FUNCTION_ID_WhichImageControllerVersionDigit3	50
#define WHICHIMAGE_FUNCTION_ID_WhichImageControllerVersionDigit4	51
#define WHICHIMAGE_FUNCTION_ID_WhichImageControllerVersionDigit5	52
#define WHICHIMAGE_FUNCTION_ID_WhichImageDriverVersionDigit1	53
#define WHICHIMAGE_FUNCTION_ID_WhichImageDriverVersionDigit2	54
#define WHICHIMAGE_FUNCTION_ID_WhichImageDriverVersionDigit3	55
#define WHICHIMAGE_FUNCTION_ID_WhichImageDriverVersionDigit4	56
#define WHICHIMAGE_FUNCTION_ID_WhichImageDriverVersionDigit5	57
#define WHICHIMAGE_FUNCTION_ID_WhichImageSelectedStandardMain	58
#define WHICHIMAGE_FUNCTION_ID_WhichImageSelectedSingleMain	59
#define WHICHIMAGE_FUNCTION_ID_WhichImageStatusElectricActuatorButton	60
#define WHICHIMAGE_FUNCTION_ID_WhichSystemVoltageTensDigit	61
#define WHICHIMAGE_FUNCTION_ID_WhichSystemVoltageOnesDigit	62
#define WHICHIMAGE_FUNCTION_ID_WhichSystemVoltageTenthsDigit	63
#define WHICHIMAGE_FUNCTION_ID_WhichImageRssiDigit1	64
#define WHICHIMAGE_FUNCTION_ID_WhichImageRssiDigit2	65



  	// PAGE ENUMERATIONS
#define PAGE_ID_Main	90
#define PAGE_ID_Choose12	112
#define PAGE_ID_Choose7	179
#define PAGE_ID_Choose5	223
#define PAGE_ID_Config	251
#define PAGE_ID_Tilt_90	283
#define PAGE_ID_StatusSystem	317
#define PAGE_ID_StatusAlarms	387
#define PAGE_ID_StatusVoltage	408
#define PAGE_ID_Tilt_180	448
#define PAGE_ID_SetupOptions	481
#define PAGE_ID_ControllerOptions	501
#define PAGE_ID_ArrowBoardOptions	524
#define PAGE_ID_MaintenanceMode	535
#define PAGE_ID_PatternConfig12	552
#define PAGE_ID_PatternConfig7	585
#define PAGE_ID_PatternConfig5	605
#define PAGE_ID_DisplayOptions	619
#define PAGE_ID_CloneSettings	634
#define PAGE_ID_CalibrateTouchPad	647
#define PAGE_ID_ResetToDefaults	657
#define PAGE_ID_TiltFrameSettings	669
#define PAGE_ID_AuxBatternConfig	681
#define PAGE_ID_SystemReset	694
#define PAGE_ID_TiltFrameType	703
#define PAGE_ID_TiltFrameMotion	720
#define PAGE_ID_ActuatorCalibration90	733
#define PAGE_ID_ActuatorCalibration180	752
#define PAGE_ID_StatusCurrent	766
#define PAGE_ID_SinglePageMain	787
